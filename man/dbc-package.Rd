% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package_dbc.R
\docType{package}
\name{dbc-package}
\alias{dbc}
\alias{dbc-package}
\title{dbc: Utilities To Design By Contract}
\description{
\code{dbc} is designed to aid writing functions under the design by contract
philosophy, where function inputs and outputs are programmatically
asserted to adhere to specifications.

\href{https://github.com/FinnishCancerRegistry/dbc/actions/workflows/R-CMD-check.yaml}{\if{html}{\figure{https://github.com/FinnishCancerRegistry/dbc/actions/workflows/R-CMD-check.yaml/badge.svg}}}
}
\section{Recommended installation}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{devtools::install_github(
  "FinnishCancerRegistry/dbc",
  ref = readline("enter latest tag on github: ")
)
}\if{html}{\out{</div>}}
}

\section{Example}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{# by adding arg assertion_type, you can use the same function for end-user
# purposes and internal purposes with clear error messages.
my_fun <- function(df, by, assertion_type = NULL) \{
  dbc::assert_is_character_nonNA_vector(
    x = by,
    assertion_type = assertion_type
  )
  dbc::assert_is_data.frame_with_required_names(
    x = df,
    required_names = by,
    assertion_type = assertion_type
  )
  return(table(df[,by]))
\}
my_fun(df, c("var_1", "var_2"))
my_fun_2 <- function(df) \{
  my_fun(df, c("var_1", "var_2"), assertion_type = "prod_input")
\}
}\if{html}{\out{</div>}}
}

\section{News}{

\subsection{News for version 0.5.3}{
\subsection{dbc}{

\verb{dbc::*_is_uniquely_named_*} funs now pass objects of length zero.
E.g. \code{dbc::test_is_uniquely_named(list()) == TRUE}.
}

}

\subsection{News for version 0.5.2}{
\subsection{dbc::handle_arg_call}{

\code{dbc::handle_arg_call} robustified in the same way as
\code{dbc::handle_arg_x_nm}, and additionally it looks at each \code{parent.frame(i)}
for \code{i = c(2L, 3L, 1L)} (yes, in that order).
}

\subsection{dbc::handle_arg_call}{

\code{dbc::handle_arg_call} returns the call from \code{sys.calls()} that has the
corresponding environment in \code{sys.frames()} as \code{env} if call cannot be
otherwise determined. If even that fails, return
\code{quote(could_not_determine_call)}.
}

\subsection{dbc::handle_arg_x_nm}{

\code{dbc::handle_arg_x_nm} now more robust as it also looks at the
environments surrounding \code{env} (the one preceding and one proceeding it
in the list of environments gotten by looping through \code{parent.frame(i)}).
}

\subsection{dbc::handle_args_inplace}{

\code{dbc::handle_args_inplace} gains optional arg
\code{env}.
}

}

\subsection{News for version 0.5.1}{
\subsection{dbc::handle_args_inplace}{

\code{dbc::handle_args_inplace} now also handles \code{y_nm}.
}

}

\subsection{News for version 0.5.0}{
\subsection{dbc}{

Improved some assertion error messages --- avoided term "mis-specified".
}

\subsection{dbc}{

All generated assertion functions no longer create reports and pass those
to \code{dbc::report_to_assertion}. Instead generated assertion functions use
\code{stop} directly. This reduced wall clock time used in evaluation by ~90\%.
}

\subsection{dbc::assert}{

New exported function \code{dbc::assert}. Evaluate arbitrary assertion
expressions.
}

\subsection{dbc::assertion_eval}{

New function \code{dbc::assertion_eval}. Assertion functions generated based on
expressions make use of this.
}

\subsection{dbc::assertion_raise}{

New function \code{dbc::assertion_raise}. This is used every time \code{dbc}
raises an error over an assertion that did not pass.
}

\subsection{dbc::expression_eval}{

New fun \code{dbc::expression_eval}. Every assertion expression in \code{dbc} is
evaluated by this function.
}

\subsection{dbc::generate_function_from_expressions}{

New exported function \code{dbc::generate_function_from_expressions}. It is
used to produce all generated functions in \code{dbc} that are based on
expressions.
}

\subsection{dbc::generate_report_function_wrapper}{

New exported function \code{dbc::generate_report_function_wrapper}.
This function is used to generate all report function wrappers in \code{dbc}.
}

\subsection{dbc::generate_report_function_wrapper_script}{

New exported function \code{dbc::generate_report_function_wrapper_script}.
This function is used to produce all generated report wrapper functions
in \code{dbc}.
}

\subsection{dbc::generate_script_from_expressions}{

New exported function \code{dbc::generate_script_from_expressions}.
This function is used to produce all generated expression-based functions
in \code{dbc}.
}

\subsection{dbc::handle_arg_x_nm}{

\code{dbc::handle_arg_x_nm} now redacts \code{x_nm} if it is longer than 50
characters.
}

\subsection{dbc::handle_args_inplace}{

New exported function \code{dbc::handle_args_inplace}.
}

\subsection{dbc::interpolate}{

New exported fun \code{dbc::interpolate}.
}

\subsection{dbc::report}{

New exported function \code{dbc::report}. Evaluate arbitrary report
expressions.
}

\subsection{dbc::report_is}{

\code{dbc::report_is} now only accepts objects of type \code{call} and \code{list}.
A \code{list} is assumed to contain \code{call}s.
}

\subsection{dbc::report_is_data_frame}{

New fun \code{dbc::report_data_table_has_no_duplicates} and derivatives.
}

\subsection{dbc::test}{

New exported function \code{dbc::test}. Evaluate arbitrary test
expressions.
}

}

\subsection{News for version 0.4.17}{
\subsection{dbc::report_to_assertion}{

Made assertion fail messages a bit prettier by surrounding object names
and expressions with \link{`} instead of \link{"}.
}

}

\subsection{News for version 0.4.16}{
\subsection{dbc}{

All generated assertion, report and test functions now check whether
\code{x} is missing and raise an informative error. There were edge cases
where \code{x} was attempted to be evaluated only in a call to \code{eval} which
resulted in cryptic error messages --- now those can no longer occur.
}

}

\subsection{News for version 0.4.15}{
\subsection{dbc}{

All generated assertion functions now pass \code{call} to
\code{dbc::report_to_assertion} arg \code{raise_error_call}. Therefore, now an error
message begins with the call of the guilty function instead of the
assertion function.
}

\subsection{dbc::report_is_one_of}{

\code{dbc::report_is_one_of} now always returns a report \code{data.frame} with only
one row. All \code{is_one_of} assertion funs are now generated instead of being
manually generated. Their error messages have therefore changed.
}

}

\subsection{News for version 0.4.14}{
\subsection{dbc::handle_arg_assertion_type}{

New function \verb{[dbc::handle_arg_assertion_type]}. Currently returns
\code{assertion_type} as-is, except \code{assertion_type = NULL}
is replaced with \code{assertion_type <- dbc::assertion_type_default()}.
Raises an error if \code{assertion_type} is not \code{NULL} nor one of
\code{dbc::assertion_types()}.
}

\subsection{dbc::report_to_assertion}{

\verb{[dbc::report_to_assertion]} now accepts (and has as default)
\code{assertion_type = NULL}. Arg \code{assertion_type} is handled by
\verb{[dbc::handle_arg_assertion_type]}.

Every assertion function with \code{assertion_type} argument now has as default
value \code{NULL}.
}

}

\subsection{News for version 0.4.13}{
\subsection{dbc}{

Improved \verb{*_vector_elems_are_in_set} funs: assertion failure message
also shows first ten elems of \code{set}.
}

}

\subsection{News for version 0.4.12}{
\subsection{dbc::assertion_type_default}{

New fun \code{dbc::assertion_type_default}.
This returns the default value for the \code{assertion_type} arg used by all
funs that have that arg.
}

}

\subsection{News for version 0.4.11}{
\subsection{dbc::report_data_table_has_no_duplicates}{

New fun \code{dbc::report_data_table_has_no_duplicates} and derivatives.
}

}

\subsection{News for version 0.4.10}{
\subsection{dbc::report_is_all_equal}{

New fun \code{dbc::report_is_all_equal}. Generated correspoding assertion
funs.
}

\subsection{dbc::report_is_identical}{

New fun \code{dbc::report_is_identical}. Generated correspoding assertion
funs.
}

}

\subsection{News for version 0.4.9}{
\subsection{dbc::assertion_types}{

Added new assertion type \code{"none"}. This was added for convenience:
using \code{assertion_type = "none"} means that the assertion is not performed.
This can save computation time.
}

}

\subsection{News for version 0.4.8}{
\subsection{dbc::report_has_class}{

\code{dbc::report_has_class} and \code{dbc::report_inherits} error message improved for
when \code{required_class} is improper.
}

\subsection{dbc::report_inherits}{

\code{dbc::report_has_class} and \code{dbc::report_inherits} error message improved for
when \code{required_class} is improper.
}

}

\subsection{News for version 0.4.7}{
\subsection{dbc::report_is}{

\code{dbc::report_is} and all corresponding assertion functions now handle
string and expression inputs more robustly.
}

\subsection{dbc::report_is_like_template}{

New fun \code{dbc::report_is_like_template}. Generated correspoding assertion
funs. Compare an object's names, class, and length to a template. Recursive
for lists.
}

}

\subsection{News for version 0.4.6}{
\subsection{dbc::report_is}{

\code{dbc::report_is} gains arg \code{env} it is passed to
\code{dbc::expressions_to_report}, so that's where \code{x} will be evaluated.
}

}
}

\keyword{internal}
