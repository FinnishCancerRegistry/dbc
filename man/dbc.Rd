% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package_dbc.R
\docType{package}
\name{dbc}
\alias{dbc}
\title{dbc: Functions To Aid Design By Contract}
\description{
\code{dbc} is designed to aid writing functions under the design by contract
philosophy, where function inputs and outputs are programmatically
asserted to adhere to specifications.

\href{https://github.com/WetRobot/dbc/actions/workflows/R-CMD-check.yaml}{\if{html}{\figure{https://github.com/WetRobot/dbc/actions/workflows/R-CMD-check.yaml/badge.svg}}}
}
\section{Recommended installation}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{devtools::install_github(
  "FinnishCancerRegistry/dbc",
  ref = readline("enter latest tag on github: ")
)
}\if{html}{\out{</div>}}
}

\section{Example}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{# by adding arg assertion_type, you can use the same function for end-user
# purposes and internal purposes with clear error messages.
my_fun <- function(df, by, assertion_type = NULL) \{
  if (is.null(assertion_type)) \{
    assertion_type <- dbc::assertion_type_default()
  \}
  dbc::assert_is_character_nonNA_vector(
    x = by,
    assertion_type = assertion_type
  )
  dbc::assert_is_data.frame_with_required_names(
    x = df,
    required_names = by,
    assertion_type = assertion_type
  )
  return(table(df[,by]))
\}
my_fun(df, c("var_1", "var_2"))
my_fun_2 <- function(df) \{
  my_fun(df, c("var_1", "var_2"), assertion_type = "prod_input")
\}
}\if{html}{\out{</div>}}
}

\section{News}{

\subsection{News for version 0.4.13}{
\subsection{Object dbc news:}{

Improved \verb{*_vector_elems_are_in_set} funs: assertion failure message
also shows first ten elems of \code{set}.
}

}

\subsection{News for version 0.4.12}{
\subsection{Object dbc::assertion_type_default news:}{

New fun \code{dbc::assertion_type_default}.
This returns the default value for the \code{assertion_type} arg used by all
funs that have that arg.
}

}

\subsection{News for version 0.4.11}{
\subsection{Object dbc::report_data_table_has_no_duplicates news:}{

New fun \code{dbc::report_data_table_has_no_duplicates} and derivatives.
}

}

\subsection{News for version 0.4.10}{
\subsection{Object dbc::report_is_all_equal news:}{

New fun \code{dbc::report_is_all_equal}. Generated correspoding assertion
funs.
}

\subsection{Object dbc::report_is_identical news:}{

New fun \code{dbc::report_is_identical}. Generated correspoding assertion
funs.
}

}

\subsection{News for version 0.4.9}{
\subsection{Object dbc::assertion_types news:}{

Added new assertion type \code{"none"}. This was added for convenience:
using \code{assertion_type = "none"} means that the assertion is not performed.
This can save computation time.
}

}

\subsection{News for version 0.4.8}{
\subsection{Object dbc::report_has_class news:}{

\code{dbc::report_has_class} and \code{dbc::report_inherits} error message improved for
when \code{required_class} is improper.
}

\subsection{Object dbc::report_inherits news:}{

\code{dbc::report_has_class} and \code{dbc::report_inherits} error message improved for
when \code{required_class} is improper.
}

}

\subsection{News for version 0.4.7}{
\subsection{Object dbc::report_is news:}{

\code{dbc::report_is} and all corresponding assertion functions now handle
string and expression inputs more robustly.
}

\subsection{Object dbc::report_is_like_template news:}{

New fun \code{dbc::report_is_like_template}. Generated correspoding assertion
funs. Compare an object's names, class, and length to a template. Recursive
for lists.
}

}

\subsection{News for version 0.4.6}{
\subsection{Object dbc::report_is news:}{

\code{dbc::report_is} gains arg \code{env} it is passed to
\code{dbc::expressions_to_report}, so that's where \code{x} will be evaluated.
}

}
}

