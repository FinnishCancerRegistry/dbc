% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package_document.R
\docType{package}
\name{dbc}
\alias{dbc}
\title{dbc: Functions To Aid Design By Contract}
\description{
\code{dbc} is designed to aid writing functions under the design by contract
philosophy, where function inputs and outputs are programmatically
asserted to adhere to specifications.
}
\details{
\code{dbc} offers the following families of functions:
\itemize{
\item \code{test}: e.g. \code{test_is_integer_atom}; returns \code{TRUE} / \code{FALSE}
\item \code{report_}: e.g. \code{report_is_integer_atom}; returns a
\code{data.frame} with columns \code{test}, \code{result}, \code{pass}, and \code{message};
failed test will have an associated error message
\item \code{assert_user_input_}: e.g. \code{assert_user_input_is_integer_atom};
these specifically check the values of function arguments supplied by the
user and should not be used for other purposes; they emit
a more user-friendly error so the user knows to adjust what they supply
to the function; you don't want to use these functions in internal
functions
\item \code{assert_prod_input_}: same as \code{assert_user_input}, but intended to check
inputs of functions when the user has no direct influence on the inputs;
these functions emit an error useful for debugging and direct the user
to report the error
\item \code{assert_dev_input_}: same as \code{assert_input_}, but only intended to be
executed during development / unit testing; in production these assertions
are not executed
\item \code{assert_prod_output_}: same as \code{assert_prod_input_}, but checks function
output
\item \code{assert_dev_output_}: same as \code{assert_dev_input_}, but checks function
output
\item \code{assert_prod_interim_}: same as \code{assert_prod_input_}, but intended to
check interim results in your function
\item \code{assert_dev_interim_}: same as \code{assert_prod_interim_}, but only executed
in dev mode
}

\code{assert_dev_input_} and \code{assert_dev_output_} families assume that the
functions are NOT called in development mode by default; they are executed
if and only if \code{getOption("dbc_mode") == "dev"}.

In summary, \code{assert_} functions are intended to check that something has
not happened which should not happen (something is wrong with the function),
\code{test_} functions return logical values, \code{report_} return reports
which can be used in more customised checking, and \code{assert_user_input_}
functions verify inputs given by the user. \code{assert_user_input_} cannot know
if it is in fact checking inputs not directly given by the user, i.e.
the error messages will be poor if a function intended for the user is also
used internally. To this end it is recommended to write a separate
internal function and a separate function exposed to the user, which only
wraps around the internal function. E.g.\preformatted{# internal function
__my_fun <- function(x) \{
  assert_prod_input_number(x)
  output <- x ^ 2
  assert_prod_output_number(x)
  return(output)
\}
# function exposed to user
my_fun <- function(x) \{
  assert_user_input_number(x)
  __my_fun(x = x)
\}
}

\code{dbc} contains a plethora of (automatically generated) functions to reduce
repetition, improve readability, and make writing checks easier (they are
easy to write when you have auto-suggestions on your IDE, and start writing
e.g. \code{assert_prod_input_} and get a number of suggestions). These are
recommended when they can be used. When not, use \code{report_on_tests} to
create your own reports, and pass its output to one of
\itemize{
\item \code{signal_user_input_report},
\item \code{signal_prod_input_report},
\item \code{signal_dev_input_report},
\item \code{signal_prod_output_report},
\item \code{signal_dev_output_report},
\item \code{signal_prod_interim_report}, and
\item \code{signal_dev_interim_report}
}

e.g.\preformatted{my_fun <- function(x) \{
  signal_user_input_report(
    report_on_tests(
      tests = "x \%in\% 1:5",
      fail_messages = paste0("expected x to be in 1:5, but it was ", x)
    )
  )
\}
}
}
