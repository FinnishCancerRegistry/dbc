% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/manually_written_caller_environment_check_funs.R
\name{caller_environment_checks}
\alias{caller_environment_checks}
\alias{report_function_caller_environment_is_not_global_environment}
\alias{report_function_caller_environment_is_global_environment}
\alias{assert_function_caller_environment_is_not_global_environment}
\alias{assert_function_caller_environment_is_global_environment}
\alias{test_function_caller_environment_is_not_global_environment}
\alias{test_function_caller_environment_is_global_environment}
\title{Caller Environment Checks}
\usage{
report_function_caller_environment_is_not_global_environment(
  x,
  x_nm,
  call = NULL
)

report_function_caller_environment_is_global_environment(x, x_nm, call = NULL)

assert_function_caller_environment_is_not_global_environment(
  x,
  x_nm,
  call = NULL
)

assert_function_caller_environment_is_global_environment(x, x_nm, call = NULL)

test_function_caller_environment_is_not_global_environment(
  x,
  x_nm,
  call = NULL
)

test_function_caller_environment_is_global_environment(x, x_nm, call = NULL)
}
\arguments{
\item{x}{\verb{[environment]} (mandatory, no default)

This should be the caller environment of a function. See \strong{Examples} for
more information.}

\item{x_nm}{\verb{[NULL, character]} (optional, default \code{NULL})

the name of the object \code{x} to mention in possible error message.
\itemize{
\item \code{NULL}: taken as \code{deparse(substitute(x))}
\item \code{character}: the name as a string
}}

\item{call}{\verb{[language, NULL]} (optional, default \code{NULL})
\itemize{
\item \code{language}: an R language object such as one produced by \link{match.call} or
\code{quote}; this call will be reported in an error
\item \code{NULL}: the call is attempted to be inferred
}}
}
\description{
Functions to check caller environment of a function.
}
\examples{
# for use in other functions only
my_fun_ <- function() {
  caller_env <- parent.frame(1)
  dbc::test_function_caller_environment_is_not_global_environment(
    x = caller_env,
    x_nm = "my_fun_"
  )
}
result <- my_fun_()
stopifnot(identical(result, FALSE))

# for use by the user only
my_fun <- function() {
  caller_env <- parent.frame(1)
  dbc::test_function_caller_environment_is_global_environment(
    x = caller_env,
    x_nm = "my_fun"
  )
}
result <- my_fun()
stopifnot(identical(result, TRUE))

# for use by the user only
my_fun <- function() {
  caller_env <- parent.frame(1)
  dbc::assert_function_caller_environment_is_global_environment(
    x = caller_env,
    x_nm = "my_fun"
  )
  my_fun_()
}
result <- my_fun()
stopifnot(identical(result, TRUE))

# this would be a mistake
my_other_fun <- function() {
  my_fun()
}
result <- tryCatch(my_other_fun(), error = function(e) e)
stopifnot(
  is.character(result[["message"]]),
  grepl("global", result[["message"]])
)

}
