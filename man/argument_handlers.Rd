% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{argument_handlers}
\alias{argument_handlers}
\alias{handle_arg_call}
\alias{handle_arg_x_nm}
\title{Argument Handlers}
\usage{
handle_arg_call(call = NULL, env = NULL)

handle_arg_x_nm(x_nm, env = NULL, arg_nm = "x")
}
\arguments{
\item{call}{\verb{[language, NULL]} (optional, default \code{NULL})
\itemize{
\item \code{language}: an R language object such as one produced by \link{match.call} or
\code{quote}; this call will be reported in an error
\item \code{NULL}: the call is attempted to be inferred
}}

\item{env}{\verb{[NULL, environment, other]} (optional, default \code{NULL})

Environment where \code{call} / \code{x.nm} is inferred in using \verb{[substitute]}
(\code{substitute(call, env)} / \code{substitute(x, env = env)}), if
\code{call} is \code{NULL}.}

\item{x_nm}{\verb{[NULL, character]} (optional, default \code{NULL})

the name of the object \code{x} to mention in possible error message.
\itemize{
\item \code{NULL}: taken as \code{deparse(substitute(x))}
\item \code{character}: the name as a string
}}

\item{arg_nm}{\verb{[character]} (default \code{"x"})

Actual name of argument, which must exist in \code{env}.}
}
\value{
\itemize{
\item \code{dbc::handle_arg_call}: returns an R \code{language} object, or \code{NULL} upon
failure to guess the call
}

\itemize{
\item \code{dbc::handle_arg_x_nm}: always returns a character vector of length 1
}
}
\description{
Functions which handle arguments of check functions.
}
\section{Functions}{

\itemize{
\item \code{dbc::handle_arg_call} is used internally in other functions
to guess \code{call} which is to be reported if there is a problem
}


\itemize{
\item \code{dbc::handle_arg_x_nm} is used internally in other functions
to guess the name of the object passed to argument \code{x} when it is not
supplied explicitly. It uses object \code{x} in its caller environment
to guess \code{x_nm} if it is \code{NULL}.
}
}

\examples{

# dbc::handle_arg_x_nm
fun <- function(x, x_nm = NULL, y, y_nm = NULL) {
  x_nm <- dbc::handle_arg_x_nm(x_nm)
  y_nm <- dbc::handle_arg_x_nm(y_nm, arg_nm = "y")
  return(mget(c("x_nm", "y_nm")))
}
obj_for_x <- 1
obj_for_y <- 2
stopifnot(identical(
  fun(x = obj_for_x, y = obj_for_y),
  list(x_nm = "obj_for_x", y_nm = "obj_for_y")
))
}
