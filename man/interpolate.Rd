% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate.R
\name{interpolate}
\alias{interpolate}
\title{Simple Text Interpolation}
\usage{
interpolate(x, env = parent.frame(1L))
}
\arguments{
\item{x}{\verb{[character]} (no default)

Text to interpolate into.}

\item{env}{\verb{[environment]} (default \code{parent.frame(1L)})

Environment where any R expression in \code{x} will be evaluated.
The default is the env where \code{dbc::interpolate} was called.}
}
\description{
Evaluate R expressions and interpolate result into string.
}
\details{
Given the \emph{interpolation environment} and a string, interpolation is
performed as follows:
\enumerate{
\item Expressions to interpolate in a string are detected using regex
\verb{[$][\{][^\{]+[\}]}. E.g. in \code{"A total of $ {1 + 1} things"}
substring \verb{$ \{1 + 1\}} is detected (without the whitespace after $).
Multiline expressions are not detected.
Expressions that contain \verb{\}} (e.g. \code{"One is $ {{my_var <- 1; my_var}}"})
will not be parsed correctly.
\item Each expression substring is evaluated in the
\emph{interpolation environment}, via
\code{eval(parse(text = expression_substring)[[1]])}.
Evaluation is done within a \verb{[tryCatch]} call; if an error or warning
is caught, interpolation fails, and the original expression substring
is used as the result of the evaluation. Otherwise the result is
what \code{eval} gives.
\item Each expression substring in the original string is substituted with
its result. This modified string is returned.
}
}
\examples{
# dbc::interpolate
person <- "matthew"
stopifnot(identical(
  dbc::interpolate("hello ${person}"),
  "hello matthew"
))
}
